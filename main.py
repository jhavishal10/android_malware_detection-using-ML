'''
main.py

This includes the entry of the program
'''
import argparse
import csv
import os.path
import os
from time import sleep as s
import pymysql
import subprocess
import hashlib

from dataset   import make_apk_vector
from training  import get_classifier, make_prediction, training_model
from utilities import get_data_directory

def parse_arguments():
    parser = argparse.ArgumentParser(description='Permission Based Malware Detector')

    parser.add_argument('input_apk_path', type=str, nargs=1, help='path to the input apk file')
    parser.add_argument("API_level", type=int, nargs=1, default=22, help="version of Android SDK")
    parser.add_argument('retrain', type=str, nargs=1, default="noretrain", help="whether to retrain the model")
    parser.add_argument('model name', type=str, nargs='?', default="Random_Forest", help="the name for the classifier")
    parser.add_argument('feature type', type=str, nargs='?', default="All", help="the feature selection policy")

    args = parser.parse_args()
    args = vars(args)

    arguments =\
    {
        "input_path" : args["input_apk_path"][0],
        "API_level"  : args["API_level"][0],
        "retrain"    : not args["retrain"][0].startswith("no"),
        "model_name" : args["model name"],
        "feature"    : args["feature type"]
    }

    return arguments
    # assert
def check(sig):
    # Open database connection
    db = pymysql.connect("localhost","mayank","mayank@25","Majorproject" )

    # prepare a cursor object using cursor() method
    cursor = db.cursor()

    # Prepare SQL query to INSERT a record into the database.
    sql = "SELECT isMalware FROM MalwareSignatures  WHERE md5 = '%s'" % (sig)
    try:
        # Execute the SQL command
        cursor.execute(sql)
        # Fetch all the rows in a list of lists.
        results = cursor.fetchall()
        for row in results:
            f = row[0]
        # Now print fetched result
        #print ("IsMalware = %s" % (f))
        return f
    except:
        print ("Error: unable to fetch data")

    # disconnect from server
    db.close()

def main():

    db = pymysql.connect("localhost","mayank","mayank@25","Majorproject" )
    print("\n*******************************************************************************************************************************************************")
    print("***************************************************************  Malware Analysis Tool  ***************************************************************")
    print("*******************************************************************************************************************************************************")
    argument = parse_arguments()
    apk_path = argument["input_path"]
    print("\n\nCalculating MD5 Signature.......")
    s(2)
    md5 = hashlib.md5(open(apk_path,'rb').read()).hexdigest()
    print(md5)
    print("\nCalculating SHA1 Signature.......")
    s(2)
    s1 = "cat " +  apk_path + "| shasum | tr -d '  -'"
    os.system(s1)
    print("\n*******************************************************************************************************************************************************")
    print("*********************************************************  Performing Signature Based Analysis  *******************************************************")
    print("*******************************************************************************************************************************************************\n\n")
    s(7)
    sigMalware = check(md5)
    if sigMalware == 0:
        print("Matching Signatures found in Database")
        print("Not a Malware")
    elif sigMalware == 1:
        print("Matching Signature found in Database")
        print("Definitely Malware")
    else:
        print("No Matching Signatures found in Database")
        print("Signature Based Analysis Failed\n\n")
    s(4)
    print("\n\n\n*******************************************************************************************************************************************************")
    print("*********************************************************  Performing Permission Based Analysis  ******************************************************")
    print("*******************************************************************************************************************************************************")
    print("\n\nGathering Permissions from AndroidManifest.xml for Analysis")
    print("Displaying Results")
    s(5)
    s2 = "perl apkperm.pl " + apk_path
    os.system(s2)
    print("\n*******************************************************************************************************************************************************")
    print("*********************************************************  Performing API Calls Based Analysis  *******************************************************")
    print("*******************************************************************************************************************************************************")
    print("\n\nGathering API Calls made by the Application for Analysis")
    print("Displaying Results\n")
    pth = "rm -rf " + apk_path.split(".")[0]
    os.system(pth)
    s(5)
    s3 = "perl apkapi.pl " + apk_path 
    os.system(s3)
    argument = parse_arguments()
    apk_path = argument["input_path"]
    # "~/Desktop/EECS600/project/data/friendly_apk/1000_com.activefrequency.android.rockout.apk"
    api_lvl = argument["API_level"]
    pscout_in = get_data_directory("training_data", "API_{}".format(api_lvl), "API_{}_parsed_api.csv".format(api_lvl))
    
    vector = make_apk_vector(apk_path, pscout_in, extract_manifest_file=True)

    if argument["retrain"]:
        training_model(feature_selection=argument["feature"])

    classifier = get_classifier(API_lvl=api_lvl, classfier_type=argument["model_name"])

    result = make_prediction(classifier, vector[:-1])
    s(10)
    print("\n*******************************************************************************************************************************************************")
    print("\n************************************************************* Results for " + apk_path + " *************************************************************\n")
    print("*******************************************************************************************************************************************************")
    print("Default Conventions:\t0=NOT malware, 1=malware")
    print("Calculated Value : " + str(result["Confidential Interval"][0]))
    print("{:20} : {:.4f} ".format("Prediction Result", result["Prediction Result"][0]))
    if result["Prediction Result"][0] == 0:
        print("The Supplied APK Does not contain malware. Feel Free to install it")
    else:
        print("The Supplied APK contains malware. Do not install or Share")


if __name__ == "__main__":
    main()




