'''
fingerprinting.py

This module fingerprints the apk file based on the permissions they use.
'''

import os
import os.path
import re
import sys

from utilities import get_data_directory

import numpy as np
from bs4 import BeautifulSoup

def load_list_of_permissions():

    file_location = get_data_directory("permission_metadata", "permission_list.txt")
    with open(file_location) as permission_source:
        return permission_source.read().split()

PERMISSION_LISTS = load_list_of_permissions()

class PermissionVector(object):

    def __init__(self):
        for permissions in PERMISSION_LISTS:
            setattr(self, permissions, 0)

    def set_permission_value(self, permission_name):
        if permission_name in self.__dict__:
            setattr(self, permission_name, 1)
            return True
        else:
            return False

    def __str__(self):
        valid_permission = [permission for permission in PERMISSION_LISTS\
        if getattr(self, permission) == 1]

        return "\n".join(valid_permission)

    def to_int_vector(self):
        vector = []
        for permissions in PERMISSION_LISTS:
            vector.append(getattr(self, permissions))
        return vector


def extract_permissions(filename):
    '''
    extract permissions from a file and make them to be
    a permission vector
    '''
    permission_vector = PermissionVector()

    with open(filename) as input_source:
        base_soup       = BeautifulSoup(input_source.read(), 'html.parser')
        all_permissions = base_soup.find_all("uses-permission")
        
        for permission in all_permissions:
            # for attr in permission:
                # print(attr)
            try:
                prettify_permission = permission["android:name"].split(".")[-1]
                permission_vector.set_permission_value(prettify_permission)
            except:
                pass
            
        
        return permission_vector


def extract_batch(folder, type_="malware"):

    files = [name for name in os.listdir(folder) if not name.startswith(".")]
    vectors = []
    for file in files:
        full_name = os.path.join(folder, file)
        permission = extract_permissions(full_name)
        vectors.append(permission.to_int_vector() + ([1,] if type_ == "malware" else [0,]))

    return vectors


if __name__ == "__main__":
    mal = extract_batch("malware_manifest", type_="malware")
    fri = extract_batch("friendly_manifest", type_="friendly")

    np.savetxt("permission_training_data.txt", mal + fri)

