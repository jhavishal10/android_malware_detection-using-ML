'''
dataset.py

This module prepares the dataset for training
'''

import concurrent.futures
import gc
import os
import sys
import subprocess

import objgraph

from utilities import get_data_directory, extract_manifest
from encoder import Encoder, extract_singlefile
from permission_vector import extract_permissions

def make_apk_vector(filename, pscout_location, extract_manifest_file=False, is_malware=False):
    '''
    this function converts an apk to a vector that can be feed into
    a classifier
    '''
    # print(filename)
    used_function = extract_singlefile(filename, dump=False)
    encoder       = Encoder(used_function, pscout_location)
    api_vectors   = encoder.encode()

    if extract_manifest_file:
        destination = extract_manifest(filename, is_malware=is_malware)

        if not (destination is None):
            permission_v     = extract_permissions(destination)

            permission_v_int = permission_v.to_int_vector()

            permission_v_int.extend(api_vectors)

            permission_v_int.append(1 if is_malware else 0)

            return permission_v_int
        
    return api_vectors

def make_apk_vector_folder(folder, pscout_location, extract_manifest_file=False, is_malware=False):
    '''
    this function iterates through the folder and extract the vector for all of them
    '''
    # for root, _, files in os.walk(folder):
    #     for file in files:
    #         all_files.append(os.path.join(root, file))

    # with concurrent.futures.ProcessPoolExecutor(max_workers=3) as executor:
    #     for members in all_files:
    #         results.append(executor.submit(make_apk_vector, members, pscout_location, extract_manifest_file, is_malware))

    # for res in results:
    #     overall.append(res.result())
    # dump_to = get_data_directory("training_data", "API_22", "API_22_training.txt")


    with open("files.txt", "w") as out:
        for root, _, files in os.walk(folder):
            for file in files:
                if not file.startswith("."):
                    full_name = os.path.join(root, file)

                    out.write(full_name)
                    out.write("\n")

            out.flush()
            gc.collect()

    
    

def default_friendly_and_malware():
    '''
    sample for dumpy friendly and malware
    '''
    friendly_apks = get_data_directory("friendly_apk")
    malware_apks  = get_data_directory("malware_apk")

    pscout_in = get_data_directory("training_data", "API_22", "API_22_parsed_api.csv")

    # friendly = make_apk_vector_folder(friendly_apks, pscout_in, extract_manifest_file=True, is_malware=False)
    malware  = make_apk_vector_folder(malware_apks,  pscout_in, extract_manifest_file=True, is_malware=True)

    # dump_to = get_data_directory("training_data", "API_22", "API_22_training.txt")

    # np.savetxt(dump_to, friendly + malware)

if __name__ == "__main__":
    pscout_in = get_data_directory("training_data", "API_22", "API_22_parsed_api.csv")
    r = make_apk_vector(sys.argv[1], pscout_in, extract_manifest_file=True, is_malware=False)

    print(" ".join([str(num) for num in r]))
    # gc.set_debug(gc.DEBUG_LEAK)
    # make_apk_vector_folder("/Users/jeromemao/Desktop/EECS600/project/data/friendly_apk", "")




