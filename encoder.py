'''
This module encodes the API used by apk files
'''

import csv
import sys
import time

from collections import defaultdict

from androguard.misc import AnalyzeAPK

from utilities import get_data_directory

def _parse_results(repr_str):
    repr_str = repr_str.strip("<>")
    repr_str = repr_str[len("analysis.MethodClassAnalysis L"):]
    useful_part = repr_str.split("(")[0]

    return "/".join(useful_part.split(";->"))

def extract_singlefile(filename, dump=False, output=None):
    _, _, decompiled = AnalyzeAPK(filename)

    if dump:
        assert not (output is None), "Need an output location if you want to dump"

    used_func = []
    for i in decompiled.get_external_classes():
        temp_used_func = [_parse_results(repr(func)) for func in i.get_methods()]
        used_func.extend(temp_used_func)

    if not dump:
        return used_func

    else:     
        with open(output, "w") as out:
            out.write("\n".join(used_func))
        return used_func

class Encoder(object):

    def __init__(self, apk_function_result, pscout_output):
        self.__pscout_output       = pscout_output
        self.__apk_function_result = apk_function_result

        self.__pscout_readable_results = defaultdict(list)

        self.__load_parsed_pscout_file()

        if isinstance(apk_function_result, str):
            with open(apk_function_result) as apk_result:
                self.__function_used = apk_result.read().split("\n")
        
        elif isinstance(apk_function_result, list):
            self.__function_used = apk_function_result


    def __load_parsed_pscout_file(self):
        # print type(self.__pscout_output)
        with open(self.__pscout_output, "r") as parsed_pscout:
            csv_handler = csv.DictReader(parsed_pscout)
            for lines in csv_handler:
                permission_name = lines["Permission"]
                function_name = lines["Function Name"]
                self.__pscout_readable_results[permission_name].append(function_name)


    def encode(self):
        file_location = get_data_directory("permission_metadata", "permission_list.txt")
        with open(file_location) as permissions:

            temp_dict = dict()
            # print("PSCOUT", len(self.__pscout_readable_results))
            for keys in self.__pscout_readable_results:
                temp_dict[keys] = ["0" for _ in range(256)]
            
            for func in self.__function_used:
                for keys in self.__pscout_readable_results:
                    try:
                        index = self.__pscout_readable_results[keys].index(func)
                        # print(keys, index)
                        temp_dict[keys][index] = "1"
                    except (ValueError, IndexError):
                        continue
            
            result_vector = []
            for permission in permissions.read().split("\n")[:-1]:
                try:
                    sliced = [temp_dict[permission][i:i+64] for i in range(0, 256, 64)]
                    for num in sliced:
                        result_vector.append(int("".join(num), base=2))
                except KeyError:
                    for _ in range(4):
                        result_vector.append(0)


            return result_vector



if __name__ == "__main__":

    e = Encoder(sys.argv[1], sys.argv[2])
    res =  e.encode()


    print(len(res))
    # del e

    # f = Encoder(sys.argv[1], sys.argv[2])
    # res_2 =  f.encode()

    # print res == res_2

